/*
 * This class is responsible for generating all of the code for the
 * RuleDescriptions class in the explanatory tool
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.codegenerator.CodeGeneratorConstants;
import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.modelbuilder.rulebuilder.Rule;

import java.io.*;
import java.util.Vector;

import javax.swing.*;

public class RuleDescriptionsGenerator implements CodeGeneratorConstants {
  private File directory; // directory to save generated code into
  private DefinedActionTypes actTypes;

  public RuleDescriptionsGenerator(DefinedActionTypes actTypes, File dir) {
    this.actTypes = actTypes;
    directory = dir;
  }

  public void generate() {
    File ruleDescFile = new File(directory,
        ("simse\\explanatorytool\\RuleDescriptions.java"));
    if (ruleDescFile.exists()) {
      ruleDescFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(ruleDescFile);
      writer
          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.RuleDescriptionsGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.explanatorytool;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public class RuleDescriptions {");
      writer.write(NEWLINE);

      // go through all actions:
      Vector actions = actTypes.getAllActionTypes();
      boolean writeElse = false;
      for (int i = 0; i < actions.size(); i++) {
        ActionType act = (ActionType) actions.get(i);
        if (act.isVisibleInExplanatoryTool()) {
          Vector rules = act.getAllRules();
          for (int j = 0; j < rules.size(); j++) {
            Rule rule = (Rule) rules.get(j);
            if (rule.isVisibleInExplanatoryTool()) {
              writer.write("static final String " + act.getName().toUpperCase()
                  + "_" + rule.getName().toUpperCase() + " = \""
                  + rule.getAnnotation().replaceAll("\n", "\\\\n").
                  replaceAll("\"", "\\\\\"") + "\";");
              writer.write(NEWLINE);
            }
          }
        }
      }
      writer.write(CLOSED_BRACK);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + ruleDescFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}