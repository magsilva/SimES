/*
 * This class is responsible for generating all of the code for the
 * CompositeGraph class in the explanatory tool
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.codegenerator.CodeGeneratorConstants;

import java.io.*;

import javax.swing.*;

public class CompositeGraphGenerator implements CodeGeneratorConstants {
  private File directory; // directory to save generated code into

  public CompositeGraphGenerator(File dir) {
    directory = dir;
  }

  public void generate() {
    File compGraphFile = new File(directory,
        ("simse\\explanatorytool\\CompositeGraph.java"));
    if (compGraphFile.exists()) {
      compGraphFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(compGraphFile);
      writer
          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.CompositeGraphGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.explanatorytool;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartMouseEvent;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartMouseListener;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.ChartPanel;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.JFreeChart;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.axis.NumberAxis;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.plot.CombinedDomainXYPlot;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.plot.PlotOrientation;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.chart.title.TextTitle;");
      writer.write(NEWLINE);
      writer.write("import org.jfree.ui.RefineryUtilities;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.awt.Color;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.WindowAdapter;");
      writer.write(NEWLINE);
      writer.write("import java.awt.event.WindowEvent;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Font;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import javax.swing.JFrame;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("public class CompositeGraph extends JFrame implements ChartMouseListener {");

      // member variables:
      writer.write("private ActionGraph actGraph;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // constructor:
      writer
          .write("public CompositeGraph(ObjectGraph objGraph, ActionGraph actGraph) {");
      writer.write(NEWLINE);
      writer.write("super(\"Composite Graph\");");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("this.actGraph = actGraph;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// parent plot:");
      writer.write(NEWLINE);
      writer.write("NumberAxis domainAxis = new NumberAxis(\"Clock Ticks\");");
      writer.write(NEWLINE);
      writer
          .write("domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());");
      writer.write(NEWLINE);
      writer
          .write("CombinedDomainXYPlot plot = new CombinedDomainXYPlot(domainAxis);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// add the subplots:");
      writer.write(NEWLINE);
      writer.write("plot.add(objGraph.getXYPlot(), 1);");
      writer.write(NEWLINE);
      writer.write("plot.add(actGraph.getXYPlot(), 1);");
      writer.write(NEWLINE);
      writer.write("plot.setOrientation(PlotOrientation.VERTICAL);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// make a new chart containing the overlaid plot:");
      writer.write(NEWLINE);
      writer
          .write("JFreeChart chart = new JFreeChart(\"Composite (Object/Action) Graph\", JFreeChart.DEFAULT_TITLE_FONT, plot, true);");
      writer.write(NEWLINE);
      writer
          .write("TextTitle subtitle = new TextTitle(objGraph.getChartTitle() + \" and Selected Actions\", new Font(\"SansSerif\", Font.BOLD, 12));");
      writer.write(NEWLINE);
      writer.write("chart.addSubtitle(subtitle);");
      writer.write(NEWLINE);
      writer.write("chart.setBackgroundPaint(Color.white);");
      writer.write(NEWLINE);
      writer
          .write("ChartPanel panel = new ChartPanel(chart, true, true, true, true, true);");
      writer.write(NEWLINE);
      writer.write("panel.addChartMouseListener(this);");
      writer.write(NEWLINE);
      writer.write("panel.setPreferredSize(new java.awt.Dimension(500, 270));");
      writer.write(NEWLINE);
      writer.write("setContentPane(panel);");
      writer.write(NEWLINE);
      writer.write("pack();");
      writer.write(NEWLINE);
      writer.write("RefineryUtilities.centerFrameOnScreen(this);");
      writer.write(NEWLINE);
      writer.write("setVisible(true);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "chartMouseClicked" method:
      writer.write("// responds to mouse clicks on the chart");
      writer.write(NEWLINE);
      writer.write("public void chartMouseClicked(ChartMouseEvent event) {");
      writer.write(NEWLINE);
      writer.write("// send the event to the action graph:");
      writer.write(NEWLINE);
      writer.write("actGraph.chartMouseClicked(event);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "chartMouseMoved" method:
      writer.write("public void chartMouseMoved(ChartMouseEvent event) {}");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // ExitListener class:
      writer.write("public class ExitListener extends WindowAdapter {");
      writer.write(NEWLINE);
      writer.write("public void windowClosing(WindowEvent event) {");
      writer.write(NEWLINE);
      writer.write("setVisible(false);");
      writer.write(NEWLINE);
      writer.write("dispose();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + compGraphFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }
}