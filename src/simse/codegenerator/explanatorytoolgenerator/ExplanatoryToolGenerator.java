/*
 * This class is responsible for generating all of the code for the
 * ExplanatoryTool component of the simulation
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.modelbuilder.ModelOptions;
import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.codegenerator.CodeGeneratorConstants;
import simse.codegenerator.explanatorytoolgenerator.ActionGraphGenerator;
import simse.codegenerator.explanatorytoolgenerator.ActionInfoPanelGenerator;
import simse.codegenerator.explanatorytoolgenerator.ObjectGraphGenerator;
import simse.codegenerator.explanatorytoolgenerator.TriggerDescriptionsGenerator;
import simse.modelbuilder.objectbuilder.Attribute;
import simse.modelbuilder.objectbuilder.DefinedObjectTypes;
import simse.modelbuilder.objectbuilder.NumericalAttribute;
import simse.modelbuilder.objectbuilder.SimSEObjectTypeTypes;
import simse.modelbuilder.startstatebuilder.CreatedObjects;
import simse.modelbuilder.startstatebuilder.SimSEObject;

import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.io.*;

import javax.swing.*;

public class ExplanatoryToolGenerator implements CodeGeneratorConstants {
  private ModelOptions options;
  private DefinedObjectTypes objTypes;
  private CreatedObjects objs;
  private DefinedActionTypes acts;
  private ObjectGraphGenerator objGraphGen; // generates the ObjectGraph class
  private ActionGraphGenerator actGraphGen; // generates the ActionGraph class
  private CompositeGraphGenerator compGraphGen; // generates the CompositeGraph
                                                // class
  private ActionInfoPanelGenerator actInfoPanelGen; // generates the
  // ActionInfoPanel class
  private RuleInfoPanelGenerator ruleInfoPanelGen; // generates the
  // RuleInfoPanel class
  private ActionInfoWindowGenerator actInfoWindowGen; // generates the
  // ActionInfoWindow class
  private TriggerDescriptionsGenerator trigDescGen; // generates the
  // TriggerDescriptions class
  private DestroyerDescriptionsGenerator destDescGen; // generates the
  // DestroyerDescriptions
  // class
  private RuleDescriptionsGenerator ruleDescGen; // generates the
  // RuleDescriptions class

  public ExplanatoryToolGenerator(ModelOptions options, 
      DefinedObjectTypes objTypes, CreatedObjects objs, 
      DefinedActionTypes acts) {
    this.options = options;
    this.objTypes = objTypes;
    this.objs = objs;
    this.acts = acts;
    objGraphGen = new ObjectGraphGenerator(objTypes, objs, 
        options.getCodeGenerationDestinationDirectory());
    actGraphGen = new ActionGraphGenerator(acts, 
        options.getCodeGenerationDestinationDirectory());
    compGraphGen = new CompositeGraphGenerator(
        options.getCodeGenerationDestinationDirectory());
    actInfoPanelGen = new ActionInfoPanelGenerator(acts, 
        options.getCodeGenerationDestinationDirectory());
    ruleInfoPanelGen = new RuleInfoPanelGenerator(acts, 
        options.getCodeGenerationDestinationDirectory());
    actInfoWindowGen = new ActionInfoWindowGenerator(
        options.getCodeGenerationDestinationDirectory());
    trigDescGen = new TriggerDescriptionsGenerator(acts, 
        options.getCodeGenerationDestinationDirectory());
    destDescGen = new DestroyerDescriptionsGenerator(acts, 
        options.getCodeGenerationDestinationDirectory());
    ruleDescGen = new RuleDescriptionsGenerator(acts, 
        options.getCodeGenerationDestinationDirectory());
  }

  public void generate() // causes all of this component's sub-components to
  // generate code
  {
    // copy the JFreeChart jars:
    copyJFreeChartJars();

    objGraphGen.generate();
    actGraphGen.generate();
    compGraphGen.generate();
    actInfoPanelGen.generate();
    ruleInfoPanelGen.generate();
    actInfoWindowGen.generate();
    trigDescGen.generate();
    destDescGen.generate();
    ruleDescGen.generate();
    generateExplanatoryTool();
  }

  private void generateExplanatoryTool() // generates the ExplanatoryTool class
  {
    File expToolFile = new File(options.
        getCodeGenerationDestinationDirectory(),
        ("simse\\explanatorytool\\ExplanatoryTool.java"));
    if (expToolFile.exists()) {
      expToolFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(expToolFile);
      writer
          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.ExplanatoryToolGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.explanatorytool;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import javax.swing.*;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.awt.event.*;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Color;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Dimension;");
      writer.write(NEWLINE);
      writer.write("import java.awt.Point;");
      writer.write(NEWLINE);
      writer.write("import java.util.ArrayList;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("public class ExplanatoryTool extends JFrame implements ActionListener {");
      writer.write(NEWLINE);

      // member variables:
      writer.write("private ArrayList log; // log for current simulation");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("private JComboBox objectList; // for choosing an object whose attributes to graph");
      writer.write(NEWLINE);
      writer
          .write("private JList attributeList; // for choosing which attributes to show");
      writer.write(NEWLINE);
      writer
          .write("private JList actionList; // for choosing which actions to show");
      writer.write(NEWLINE);
      writer
          .write("private JButton generateObjGraphButton; // for generating an object graph");
      writer.write(NEWLINE);
      writer
          .write("private JButton generateActGraphButton; // for generating an action graph");
      writer.write(NEWLINE);
      writer
          .write("private JButton generateCompGraphButton; // for generating a composite graph");
      writer.write(NEWLINE);
      writer.write("private Box mainPane;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // constructor:
      writer.write("public ExplanatoryTool(JFrame owner, ArrayList log) {");
      writer.write(NEWLINE);
      writer.write("super(\"Explanatory Tool\");");
      writer.write(NEWLINE);
      writer.write("this.log = log;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create main panel (box):");
      writer.write(NEWLINE);
      writer.write("mainPane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create main sub-panel:");
      writer.write(NEWLINE);
      writer.write("JPanel mainSubPanel = new JPanel();");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create title pane and label:");
      writer.write(NEWLINE);
      writer.write("JPanel titlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("titlePane.add(new JLabel(\"Generate Graph(s):\"));");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create object pane and components:");
      writer.write(NEWLINE);
      writer.write("Box objectPane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      writer.write("JPanel objectTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("objectTitlePane.add(new JLabel(\"Object Graph:\"));");
      writer.write(NEWLINE);
      writer.write("objectPane.add(objectTitlePane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// object list:");
      writer.write(NEWLINE);
      writer.write("String[] objects = {");
      Vector objects = objs.getAllObjects();
      for (int i = 0; i < objects.size(); i++) {
        SimSEObject obj = (SimSEObject) objects.get(i);
        writer.write("\""
            + getUpperCaseLeading(obj.getSimSEObjectType().getName())
            + " "
            + getUpperCaseLeading(SimSEObjectTypeTypes.getText(obj
                .getSimSEObjectType().getType())) + " "
            + obj.getKey().getValue().toString() + "\",");
        writer.write(NEWLINE);
      }
      writer.write("};");
      writer.write(NEWLINE);
      writer.write("objectList = new JComboBox(objects);");
      writer.write(NEWLINE);
      writer.write("objectList.addActionListener(this);");
      writer.write(NEWLINE);
      writer.write("objectPane.add(objectList);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create attribute list pane:");
      writer.write(NEWLINE);
      writer.write("JPanel attributeListTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer
          .write("attributeListTitlePane.add(new JLabel(\"Show Attributes:\"));");
      writer.write(NEWLINE);
      writer.write("objectPane.add(attributeListTitlePane);");
      writer.write(NEWLINE);
      writer.write("attributeList = new JList();");
      writer.write(NEWLINE);
      writer
          .write("attributeList.setVisibleRowCount(5); // make 5 items visible at a time");
      writer.write(NEWLINE);
      writer.write("attributeList.setFixedCellWidth(250);");
      writer.write(NEWLINE);
      writer
          .write("attributeList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);");
      writer.write(NEWLINE);
      writer.write("refreshAttributeList();");
      writer.write(NEWLINE);
      writer
          .write("JScrollPane attributeListPane = new JScrollPane(attributeList);");
      writer.write(NEWLINE);
      writer.write("objectPane.add(attributeListPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create objectBottom pane & button:");
      writer.write(NEWLINE);
      writer.write("JPanel objBottomPane = new JPanel();");
      writer.write(NEWLINE);
      writer
          .write("generateObjGraphButton = new JButton(\"Generate Object Graph\");");
      writer.write(NEWLINE);
      writer.write("generateObjGraphButton.addActionListener(this);");
      writer.write(NEWLINE);
      writer.write("objBottomPane.add(generateObjGraphButton);");
      writer.write(NEWLINE);
      writer.write("objectPane.add(objBottomPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create action pane and components:");
      writer.write(NEWLINE);
      writer.write("Box actionPane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      writer.write("JPanel actionTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("actionTitlePane.add(new JLabel(\"Action Graph:\"));");
      writer.write(NEWLINE);
      writer.write("actionPane.add(actionTitlePane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// action list:");
      writer.write(NEWLINE);
      writer.write("String[] actions = {");
      writer.write(NEWLINE);
      Vector actions = acts.getAllActionTypes();
      for (int i = 0; i < actions.size(); i++) {
        ActionType act = (ActionType) actions.get(i);
        if (act.isVisibleInExplanatoryTool()) {
          writer.write("\"" + getUpperCaseLeading(act.getName()) + "\",");
          writer.write(NEWLINE);
        }
      }
      writer.write("};");
      writer.write(NEWLINE);
      writer.write("actionList = new JList(actions);");
      writer.write(NEWLINE);
      writer
          .write("actionList.setVisibleRowCount(5); // make 5 items visible at a time");
      writer.write(NEWLINE);
      writer.write("actionList.setFixedCellWidth(250);");
      writer.write(NEWLINE);
      writer
          .write("actionList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);");
      writer.write(NEWLINE);
      writer.write("JScrollPane actionListPane = new JScrollPane(actionList);");
      writer.write(NEWLINE);
      writer.write("actionPane.add(actionListPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create actionBottom pane & buttons:");
      writer.write(NEWLINE);
      writer.write("JPanel actBottomPane = new JPanel();");
      writer.write(NEWLINE);
      writer
          .write("generateActGraphButton = new JButton(\"Generate Action Graph\");");
      writer.write(NEWLINE);
      writer.write("generateActGraphButton.addActionListener(this);");
      writer.write(NEWLINE);
      writer.write("actBottomPane.add(generateActGraphButton);");
      writer.write(NEWLINE);
      writer.write("actionPane.add(actBottomPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create bottom pane & button:");
      writer.write(NEWLINE);
      writer.write("JPanel bottomPane = new JPanel();");
      writer.write(NEWLINE);
      writer
          .write("generateCompGraphButton = new JButton(\"Generate Composite Graph\");");
      writer.write(NEWLINE);
      writer.write("generateCompGraphButton.addActionListener(this);");
      writer.write(NEWLINE);
      writer.write("bottomPane.add(generateCompGraphButton);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// set up tool tips:");
      writer.write(NEWLINE);
      writer.write("setUpToolTips();");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Add panes to main pane and main sub-pane:");
      writer.write(NEWLINE);
      writer.write("mainSubPanel.add(objectPane);");
      writer.write(NEWLINE);
      writer.write("mainSubPanel.add(actionPane);");
      writer.write(NEWLINE);
      writer.write("mainPane.add(titlePane);");
      writer.write(NEWLINE);
      writer.write("JSeparator separator1 = new JSeparator();");
      writer.write(NEWLINE);
      writer.write("separator1.setMaximumSize(new Dimension(2900, 1));");
      writer.write(NEWLINE);
      writer.write("mainPane.add(separator1);");
      writer.write(NEWLINE);
      writer.write("mainPane.add(mainSubPanel);");
      writer.write(NEWLINE);
      writer.write("JSeparator separator2 = new JSeparator();");
      writer.write(NEWLINE);
      writer.write("separator2.setMaximumSize(new Dimension(2900, 1));");
      writer.write(NEWLINE);
      writer.write("mainPane.add(separator2);");
      writer.write(NEWLINE);
      writer.write("mainPane.add(bottomPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Set main window frame properties:");
      writer.write(NEWLINE);
      writer.write("setBackground(Color.black);");
      writer.write(NEWLINE);
      writer.write("setContentPane(mainPane);");
      writer.write(NEWLINE);
      writer.write("validate();");
      writer.write(NEWLINE);
      writer.write("pack();");
      writer.write(NEWLINE);
      writer.write("repaint();");
      writer.write(NEWLINE);
      writer.write("toFront();");
      writer.write(NEWLINE);
      writer.write("// Make it show up in the center of the screen:");
      writer.write(NEWLINE);
      writer.write("Point ownerLoc = owner.getLocationOnScreen();");
      writer.write(NEWLINE);
      writer.write("Point thisLoc = new Point();");
      writer.write(NEWLINE);
      writer
          .write("thisLoc.setLocation((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)), (ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));");
      writer.write(NEWLINE);
      writer.write("setLocation(thisLoc);");
      writer.write(NEWLINE);
      writer.write("setVisible(true);");
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "actionPerformed" method:
      writer.write("public void actionPerformed(ActionEvent evt) {");
      writer.write(NEWLINE);
      writer
          .write("Object source = evt.getSource(); // get which component the action came from");
      writer.write(NEWLINE);
      writer.write("if (source == objectList) { // user has chosen an object");
      writer.write(NEWLINE);
      writer.write("refreshAttributeList();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer
          .write("else if (source == generateObjGraphButton) { // generateObjGraphButton has been pressed");
      writer.write(NEWLINE);
      writer
          .write("String selectedObj = (String)objectList.getSelectedItem();");
      writer.write(NEWLINE);
      writer.write("String[] words = selectedObj.split(\"\\\\s\");");
      writer.write(NEWLINE);
      writer
          .write("String title = ((String)objectList.getSelectedItem()) + \" Attributes\";");
      writer.write(NEWLINE);
      writer.write("String objType = words[0];");
      writer.write(NEWLINE);
      writer.write("String objTypeType = words[1];");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// add 2 for the 2 spaces:");
      writer.write(NEWLINE);
      writer
          .write("String keyAttVal = selectedObj.substring(objType.length() + objTypeType.length() + 2);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("Object[] selectedAtts = attributeList.getSelectedValues();");
      writer.write(NEWLINE);
      writer.write("String[] attributes = new String[selectedAtts.length];");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < selectedAtts.length; i++) {");
      writer.write(NEWLINE);
      writer.write("attributes[i] = new String((String)selectedAtts[i]);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer
          .write("if (attributes.length > 0) { // at least one attribute is selected");
      writer.write(NEWLINE);
      writer
          .write("ObjectGraph graph = new ObjectGraph(title, log, objTypeType, objType, keyAttVal, attributes, true);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else {");
      writer.write(NEWLINE);
      writer
          .write("JOptionPane.showMessageDialog(null, (\"Please select at least one attribute\"), \"Warning\", JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer
          .write("else if (source == generateActGraphButton) { // generateActGraphButton has been pressed");
      writer.write(NEWLINE);
      writer
          .write("Object[] selectedActions = actionList.getSelectedValues();");
      writer.write(NEWLINE);
      writer.write("String[] actions = new String[selectedActions.length];");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < selectedActions.length; i++) {");
      writer.write(NEWLINE);
      writer.write("actions[i] = new String((String) selectedActions[i]);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer
          .write("if (actions.length > 0) { // at least one attribute is selected");
      writer.write(NEWLINE);
      writer.write("ActionGraph graph = new ActionGraph(log, actions, true);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else {");
      writer.write(NEWLINE);
      writer
          .write("JOptionPane.showMessageDialog(null, (\"Please select at least one action\"), \"Warning\", JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer
          .write("else if (source == generateCompGraphButton) { // generateCompGraphButton has been pressed");
      writer.write(NEWLINE);
      writer
          .write("String selectedObj = (String) objectList.getSelectedItem();");
      writer.write(NEWLINE);
      writer.write("String[] words = selectedObj.split(\"\\\\s\");");
      writer.write(NEWLINE);
      writer
          .write("String title = ((String) objectList.getSelectedItem()) + \" Attributes\";");
      writer.write(NEWLINE);
      writer.write("String objType = words[0];");
      writer.write(NEWLINE);
      writer.write("String objTypeType = words[1];");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// add 2 for the 2 spaces:");
      writer.write(NEWLINE);
      writer
          .write("String keyAttVal = selectedObj.substring(objType.length() + objTypeType.length() + 2);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("Object[] selectedAtts = attributeList.getSelectedValues();");
      writer.write(NEWLINE);
      writer.write("String[] attributes = new String[selectedAtts.length];");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < selectedAtts.length; i++) {");
      writer.write(NEWLINE);
      writer.write("attributes[i] = new String((String) selectedAtts[i]);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer
          .write("if (attributes.length > 0) { // at least one attribute is selected");
      writer.write(NEWLINE);
      writer
          .write("ObjectGraph objGraph = new ObjectGraph(title, log, objTypeType, objType, keyAttVal, attributes, false);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("Object[] selectedActions = actionList.getSelectedValues();");
      writer.write(NEWLINE);
      writer.write("String[] actions = new String[selectedActions.length];");
      writer.write(NEWLINE);
      writer.write("for (int i = 0; i < selectedActions.length; i++) {");
      writer.write(NEWLINE);
      writer.write("actions[i] = new String((String) selectedActions[i]);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer
          .write("if (actions.length > 0) { // at least one attribute is selected");
      writer.write(NEWLINE);
      writer
          .write("ActionGraph actGraph = new ActionGraph(log, actions, false);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// generate composite graph:");
      writer.write(NEWLINE);
      writer
          .write("CompositeGraph compGraph = new CompositeGraph(objGraph, actGraph);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else {");
      writer.write(NEWLINE);
      writer
          .write("JOptionPane.showMessageDialog(null, (\"Please select at least one action\"), \"Warning\", JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else {");
      writer.write(NEWLINE);
      writer
          .write("JOptionPane.showMessageDialog(null, (\"Please select at least one attribute\"), \"Warning\", JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "refreshAttributeList" method:
      writer.write("private void refreshAttributeList() {");
      writer.write(NEWLINE);
      writer.write("attributeList.removeAll();");
      writer.write(NEWLINE);
      writer
          .write("String selectedObject = (String)objectList.getSelectedItem();");
      writer.write(NEWLINE);
      for (int i = 0; i < objects.size(); i++) {
        SimSEObject obj = (SimSEObject) objects.get(i);
        if (i > 0) {
          writer.write("else ");
        }
        writer.write("if (selectedObject.startsWith(\""
            + getUpperCaseLeading(obj.getSimSEObjectType().getName()) + " "
            + SimSEObjectTypeTypes.getText(obj.getSimSEObjectType().getType())
            + "\")) {");
        writer.write(NEWLINE);
        writer.write("String[] attributes = {");
        writer.write(NEWLINE);
        Vector attributes = obj.getSimSEObjectType().getAllAttributes();
        for (int j = 0; j < attributes.size(); j++) {
          Attribute att = (Attribute) attributes.get(j);
          if ((att instanceof NumericalAttribute)
              && ((att.isVisible()) || (att.isVisibleOnCompletion()))) {
            writer.write("\"" + att.getName() + "\",");
            writer.write(NEWLINE);
          }
        }
        writer.write("};");
        writer.write(NEWLINE);
        writer.write("attributeList.setListData(attributes);");
        writer.write(NEWLINE);
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
      }
      writer
          .write("// make first item selected if there is at least one item in the list:");
      writer.write(NEWLINE);
      writer.write("if (attributeList.getModel().getSize() > 0) {");
      writer.write(NEWLINE);
      writer.write("attributeList.setSelectedIndex(0);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "setUpToolTips" method:
      writer.write("private void setUpToolTips() {");
      writer.write(NEWLINE);
      writer.write("objectList.setToolTipText(\"Choose an object to graph\");");
      writer.write(NEWLINE);
      writer
          .write("attributeList.setToolTipText(\"Choose which attributes to graph\");");
      writer.write(NEWLINE);
      writer
          .write("actionList.setToolTipText(\"Choose which actions to graph\");");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.write(CLOSED_BRACK);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + expToolFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }

  private String getUpperCaseLeading(String s) {
    return (s.substring(0, 1).toUpperCase() + s.substring(1));
  }

  // copies the JFreeChart jars into the generated code directory
  private void copyJFreeChartJars() {
    try {
      ZipInputStream zis = new ZipInputStream(ExplanatoryToolGenerator.class
          .getResourceAsStream("res/jfreechart.zip"));
      while (true) {
        ZipEntry ze = zis.getNextEntry();
        if (ze == null) {
          break;
        }
        new File(options.getCodeGenerationDestinationDirectory() + "\\lib\\" +
            ze.getName()).createNewFile();
        byte[] buffer = new byte[1024];
        int len = 1024;
        BufferedOutputStream out = new BufferedOutputStream(
            new FileOutputStream(options.
                getCodeGenerationDestinationDirectory() + "\\lib\\" + 
                ze.getName()));
        while ((len = zis.read(buffer, 0, len)) >= 0) {
          out.write(buffer, 0, len);
        }
        out.close();
        zis.closeEntry();
      }
      zis.close();
    } catch (IOException ioe) {
      System.out.println("IOE");
      ioe.printStackTrace();
    }
  }
}