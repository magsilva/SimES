/*
 * This class is responsible for generating all of the code for the
 * RuleInfoPanel class in the explanatory tool
 */

package simse.codegenerator.explanatorytoolgenerator;

import simse.codegenerator.CodeGeneratorConstants;
import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.modelbuilder.rulebuilder.Rule;

import java.io.*;
import java.util.Vector;

import javax.swing.*;

public class RuleInfoPanelGenerator implements CodeGeneratorConstants {
  private File directory; // directory to save generated code into
  private DefinedActionTypes actTypes;

  public RuleInfoPanelGenerator(DefinedActionTypes actTypes, File dir) {
    this.actTypes = actTypes;
    directory = dir;
  }

  public void generate() {
    File ruleInfoFile = new File(directory,
        ("simse\\explanatorytool\\RuleInfoPanel.java"));
    if (ruleInfoFile.exists()) {
      ruleInfoFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(ruleInfoFile);
      writer
          .write("/* File generated by: simse.codegenerator.explanatorytoolgenerator.RuleInfoPanelGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.explanatorytool;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import simse.adts.actions.*;");
      writer.write(NEWLINE);
      writer.write("import simse.explanatorytool.RuleDescriptions;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import javax.swing.*;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.event.ListSelectionEvent;");
      writer.write(NEWLINE);
      writer.write("import javax.swing.event.ListSelectionListener;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.awt.Dimension;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("public class RuleInfoPanel extends JPanel implements ListSelectionListener {");
      writer.write(NEWLINE);

      // member variables:
      writer
          .write("private simse.adts.actions.Action action; // action in focus");
      writer.write(NEWLINE);
      writer
          .write("private int clockTickTiming; // whether the clock tick is trigger, destroyer, or intermediate");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("private JList ruleList; // for choosing which rule to show");
      writer.write(NEWLINE);
      writer
          .write("private JTextArea descriptionArea; // for displaying a rule description");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer
          .write("// constants for determining which kind of clock tick the one in focus is:");
      writer.write(NEWLINE);
      writer.write("static final int TRIGGER = 0;");
      writer.write(NEWLINE);
      writer.write("static final int DESTROYER = 1;");
      writer.write(NEWLINE);
      writer.write("static final int INTERMEDIATE = 2;");
      writer.write(NEWLINE);
      writer.write("static final int SHOW_ALL = 3;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // constructor:
      writer
          .write("public RuleInfoPanel(JFrame owner, simse.adts.actions.Action action, int clockTickTiming, int clockTick) {");
      writer.write(NEWLINE);
      writer.write("this.action = action;");
      writer.write(NEWLINE);
      writer.write("this.clockTickTiming = clockTickTiming;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create main panel:");
      writer.write(NEWLINE);
      writer.write("JPanel mainPane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("mainPane.setPreferredSize(new Dimension(900, 550));");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Create rule pane and components:");
      writer.write(NEWLINE);
      writer.write("Box rulePane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      writer.write("JPanel ruleTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("String title = \"\";");
      writer.write(NEWLINE);
      writer.write("if (clockTickTiming == TRIGGER) {");
      writer.write(NEWLINE);
      writer.write("title = \"Trigger Rules:\";");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if (clockTickTiming == DESTROYER) {");
      writer.write(NEWLINE);
      writer.write("title = \"Destroyer Rules:\";");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if (clockTickTiming == INTERMEDIATE) {");
      writer.write(NEWLINE);
      writer.write("title = \"Intermediate Rules:\";");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("else if (clockTickTiming == SHOW_ALL) {");
      writer.write(NEWLINE);
      writer.write("title = \"All Rules:\";");
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write("ruleTitlePane.add(new JLabel(title));");
      writer.write(NEWLINE);
      writer.write("rulePane.add(ruleTitlePane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// rule list:");
      writer.write(NEWLINE);
      writer.write("ruleList = new JList();");
      writer.write(NEWLINE);
      writer.write("ruleList.setVisibleRowCount(26);");
      writer.write(NEWLINE);
      writer.write("ruleList.setFixedCellWidth(400);");
      writer.write(NEWLINE);
      writer
          .write("ruleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);");
      writer.write(NEWLINE);
      writer.write("ruleList.addListSelectionListener(this);");
      writer.write(NEWLINE);
      writer.write("initializeRuleList();");
      writer.write(NEWLINE);
      writer.write("JScrollPane ruleListPane = new JScrollPane(ruleList);");
      writer.write(NEWLINE);
      writer.write("rulePane.add(ruleListPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// description pane:");
      writer.write(NEWLINE);
      writer.write("Box descriptionPane = Box.createVerticalBox();");
      writer.write(NEWLINE);
      writer.write("JPanel descriptionTitlePane = new JPanel();");
      writer.write(NEWLINE);
      writer.write("descriptionTitlePane.add(new JLabel(\"Description:\"));");
      writer.write(NEWLINE);
      writer.write("descriptionPane.add(descriptionTitlePane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// description text area:");
      writer.write(NEWLINE);
      writer.write("descriptionArea = new JTextArea(29, 30);");
      writer.write(NEWLINE);
      writer.write("descriptionArea.setLineWrap(true);");
      writer.write(NEWLINE);
      writer.write("descriptionArea.setWrapStyleWord(true);");
      writer.write(NEWLINE);
      writer.write("descriptionArea.setEditable(false);");
      writer.write(NEWLINE);
      writer
          .write("JScrollPane descriptionScrollPane = new JScrollPane(descriptionArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);");
      writer.write(NEWLINE);
      writer.write("descriptionPane.add(descriptionScrollPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("rulePane.add(descriptionPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("// Add panes to main pane:");
      writer.write(NEWLINE);
      writer.write("mainPane.add(rulePane);");
      writer.write(NEWLINE);
      writer.write("mainPane.add(descriptionPane);");
      writer.write(NEWLINE);
      writer.write("add(mainPane);");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("setOpaque(true);");
      writer.write(NEWLINE);
      writer.write("validate();");
      writer.write(NEWLINE);
      writer.write("repaint();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "valueChanged" method:
      writer.write("public void valueChanged(ListSelectionEvent e) {");
      writer.write(NEWLINE);
      writer
          .write("if (e.getSource() == ruleList && ruleList.getSelectedIndex() >= 0) {");
      writer.write(NEWLINE);
      writer.write("refreshDescriptionArea();");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "initializeRuleList" method:
      writer.write("private void initializeRuleList() {");
      writer.write(NEWLINE);

      // go through all actions:
      Vector actions = actTypes.getAllActionTypes();
      boolean writeElse = false;
      for (int i = 0; i < actions.size(); i++) {
        ActionType action = (ActionType) actions.get(i);
        if (action.isVisibleInExplanatoryTool()) {
          if (writeElse) {
            writer.write("else ");
          } else {
            writeElse = true;
          }
          writer.write("if (action instanceof "
              + getUpperCaseLeading(action.getName()) + "Action) {");
          writer.write(NEWLINE);
          writer.write("if (clockTickTiming == TRIGGER) {");
          writer.write(NEWLINE);
          Vector trigRules = action.getAllTriggerRules();
          if (trigRules.size() > 0) {
            writer.write("String[] list = {");
            writer.write(NEWLINE);

            // go through all trigger rules:
            for (int j = 0; j < trigRules.size(); j++) {
              Rule trigRule = (Rule) trigRules.get(j);
              if (trigRule.isVisibleInExplanatoryTool()) {
                writer.write("\"" + trigRule.getName() + "\",");
                writer.write(NEWLINE);
              }
            }
            writer.write("};");
            writer.write(NEWLINE);
            writer.write("ruleList.setListData(list);");
            writer.write(NEWLINE);
          }
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
          writer.write("else if (clockTickTiming == DESTROYER) {");
          writer.write(NEWLINE);
          Vector destRules = action.getAllDestroyerRules();
          if (destRules.size() > 0) {
            writer.write("String[] list = {");
            writer.write(NEWLINE);

            // go through all destroyer rules:
            for (int j = 0; j < destRules.size(); j++) {
              Rule destRule = (Rule) destRules.get(j);
              if (destRule.isVisibleInExplanatoryTool()) {
                writer.write("\"" + destRule.getName() + "\",");
                writer.write(NEWLINE);
              }
            }
            writer.write("};");
            writer.write(NEWLINE);
            writer.write("ruleList.setListData(list);");
            writer.write(NEWLINE);
          }
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
          writer.write("else if (clockTickTiming == INTERMEDIATE) {");
          writer.write(NEWLINE);
          Vector contRules = action.getAllContinuousRules();
          if (contRules.size() > 0) {
            writer.write("String[] list = {");
            writer.write(NEWLINE);

            // go through all continuous rules:
            for (int j = 0; j < contRules.size(); j++) {
              Rule contRule = (Rule) contRules.get(j);
              if (contRule.isVisibleInExplanatoryTool()) {
                writer.write("\"" + contRule.getName() + "\",");
                writer.write(NEWLINE);
              }
            }
            writer.write("};");
            writer.write(NEWLINE);
            writer.write("ruleList.setListData(list);");
            writer.write(NEWLINE);
          }
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
          writer.write("else if (clockTickTiming == SHOW_ALL) {");
          writer.write(NEWLINE);
          Vector allRules = action.getAllRules();
          if (allRules.size() > 0) {
            writer.write("String[] list = {");
            writer.write(NEWLINE);

            // go through all rules:
            for (int j = 0; j < allRules.size(); j++) {
              Rule rule = (Rule) allRules.get(j);
              if (rule.isVisibleInExplanatoryTool()) {
                writer.write("\"" + rule.getName() + "\",");
                writer.write(NEWLINE);
              }
            }
            writer.write("};");
            writer.write(NEWLINE);
            writer.write("ruleList.setListData(list);");
            writer.write(NEWLINE);
          }
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
        }
      }
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "refreshDescriptionArea" method:
      writer
          .write("// refreshes the description area with the selected rule description");
      writer.write(NEWLINE);
      writer.write("private void refreshDescriptionArea() {");
      writer.write(NEWLINE);
      writer.write("String name = (String) ruleList.getSelectedValue();");
      writer.write(NEWLINE);
      writer.write("if (name != null) {");
      writer.write(NEWLINE);
      writer.write("String text = \"\";");
      writer.write(NEWLINE);

      // go through all actions:
      writeElse = false;
      for (int i = 0; i < actions.size(); i++) {
        ActionType action = (ActionType) actions.get(i);
        if (action.isVisibleInExplanatoryTool()) {
          if (writeElse) {
            writer.write("else ");
          } else {
            writeElse = true;
          }
          writer.write("if (action instanceof "
              + getUpperCaseLeading(action.getName()) + "Action) {");
          writer.write(NEWLINE);

          // go through all rules:
          Vector rules = action.getAllRules();
          boolean writeElse2 = false;
          for (int j = 0; j < rules.size(); j++) {
            Rule rule = (Rule) rules.get(j);
            if (rule.isVisibleInExplanatoryTool()) {
              if (writeElse2) {
                writer.write("else ");
              } else {
                writeElse2 = true;
              }
              writer.write("if (name.equals(\"" + rule.getName() + "\")) {");
              writer.write(NEWLINE);
              writer.write("text = RuleDescriptions."
                  + action.getName().toUpperCase() + "_"
                  + rule.getName().toUpperCase() + ";");
              writer.write(NEWLINE);
              writer.write(CLOSED_BRACK);
            }
          }
          writer.write(CLOSED_BRACK);
          writer.write(NEWLINE);
        }
      }
      writer.write("descriptionArea.setText(text);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.write(CLOSED_BRACK);
      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + ruleInfoFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }

  private String getUpperCaseLeading(String s) {
    return (s.substring(0, 1).toUpperCase() + s.substring(1));
  }
}