/*
 * This class is responsible for generating all of the code for the state's
 * logger component
 */

package simse.codegenerator.stategenerator;

import java.io.*;
import java.util.Vector;

import javax.swing.*;

import simse.codegenerator.*;
import simse.modelbuilder.actionbuilder.ActionType;
import simse.modelbuilder.actionbuilder.DefinedActionTypes;
import simse.modelbuilder.objectbuilder.Attribute;
import simse.modelbuilder.objectbuilder.DefinedObjectTypes;
import simse.modelbuilder.objectbuilder.SimSEObjectType;
import simse.modelbuilder.objectbuilder.SimSEObjectTypeTypes;

public class LoggerGenerator implements CodeGeneratorConstants {
  private File directory; // directory to generate into

  private DefinedObjectTypes objTypes; // holds all of the defined object types
                                       // from an sso file
  private DefinedActionTypes actTypes; // holds all of the defined action types
                                       // from an ssa file

  public LoggerGenerator(DefinedObjectTypes dots, DefinedActionTypes dats,
      File dir) {
    objTypes = dots;
    actTypes = dats;
    directory = dir;
  }

  public void generate() {
    File loggerFile = new File(directory, ("simse\\state\\Logger\\Logger.java"));
    if (loggerFile.exists()) {
      loggerFile.delete(); // delete old version of file
    }
    try {
      FileWriter writer = new FileWriter(loggerFile);
      writer
          .write("/* File generated by: simse.codegenerator.stategenerator.LoggerGenerator */");
      writer.write(NEWLINE);
      writer.write("package simse.state.logger;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import simse.adts.objects.*;");
      writer.write(NEWLINE);
      writer.write("import simse.adts.actions.*;");
      writer.write(NEWLINE);
      writer.write("import simse.state.*;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import java.io.File;");
      writer.write(NEWLINE);
      writer.write("import java.io.FileWriter;");
      writer.write(NEWLINE);
      writer.write("import java.io.IOException;");
      writer.write(NEWLINE);
      writer.write("import java.util.Vector;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("import javax.swing.JOptionPane;");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("public class Logger {");
      writer.write(NEWLINE);

      // member variables:
      writer.write("private final char NEWLINE = '\\n';");
      writer.write(NEWLINE);
      writer.write("private final char OPEN_BRACK = '{';");
      writer.write(NEWLINE);
      writer.write("private final char CLOSED_BRACK = '}';");
      writer.write(NEWLINE);
      writer
          .write("private final String BEGIN_CLOCK_TICK_TAG = \"<beginClockTick>\";");
      writer.write(NEWLINE);
      writer
          .write("private final String END_CLOCK_TICK_TAG = \"<endClockTick>\";");
      writer.write(NEWLINE);
      writer
          .write("private final String BEGIN_OBJECT_TAG = \"<beginObject>\";");
      writer.write(NEWLINE);
      writer.write("private final String END_OBJECT_TAG = \"<endObject>\";");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("private State state;");
      writer.write(NEWLINE);
      writer.write("private File logFile; // log file");
      writer.write(NEWLINE);
      writer.write("private FileWriter writer; // writer");
      writer.write(NEWLINE);

      // constructor:
      writer.write("public Logger(State state) {");
      writer.write(NEWLINE);
      writer.write("this.state = state;");
      writer.write(NEWLINE);
      writer.write("try {");
      writer.write(NEWLINE);
      writer.write("// create a temporary file");
      writer.write(NEWLINE);
      writer.write("logFile = File.createTempFile(\"sim\", \".sim\");");
      writer.write(NEWLINE);
      writer.write(NEWLINE);
      writer.write("writer = new FileWriter(logFile);");
      writer.write(NEWLINE);
      writer.write("} catch (IOException e) {");
      writer.write(NEWLINE);
      writer
          .write("JOptionPane.showMessageDialog(null, (\"Error creating log file\"), \"File IO Error\", JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "update" method:
      writer
          .write("// updates the clock tick mark in the file and all object states");
      writer.write(NEWLINE);
      writer.write("public void update() {");
      writer.write(NEWLINE);
      writer.write("try {");
      writer.write(NEWLINE);
      writer.write("writer.write(BEGIN_CLOCK_TICK_TAG);");
      writer.write(NEWLINE);
      writer.write("writer.write(NEWLINE);");
      writer.write(NEWLINE);
      writer.write("writer.write(\"\" + state.getClock().getTime());");
      writer.write(NEWLINE);
      writer.write("writer.write(NEWLINE);");
      writer.write(NEWLINE);
      writer.write("writer.write(END_CLOCK_TICK_TAG);");
      writer.write(NEWLINE);
      writer.write("writer.write(NEWLINE);");
      writer.write(NEWLINE);
      writer.write("logAllObjectStates();");
      writer.write(NEWLINE);
      writer.write("} catch (IOException e) {");
      writer.write(NEWLINE);
      writer
          .write("JOptionPane.showMessageDialog(null, (\"Error writing log file\"), \"File IO Error\", JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // "logAllObjectStates" method:
      writer.write("// writes state of all objects to file");
      writer.write(NEWLINE);
      writer.write("private void logAllObjectStates() {");
      writer.write(NEWLINE);
      writer.write("try {");
      writer.write(NEWLINE);

      // go through each object type and generate code for updating it:
      Vector types = objTypes.getAllObjectTypes();
      for (int i = 0; i < types.size(); i++) {
        SimSEObjectType objType = (SimSEObjectType) types.get(i);
        String uCaseName = getUpperCaseLeading(objType.getName());
        writer.write("Vector all" + uCaseName + " = " + "state.get"
            + SimSEObjectTypeTypes.getText(objType.getType())
            + "StateRepository().get" + uCaseName
            + "StateRepository().getAll();");
        writer.write(NEWLINE);
        writer.write("for (int i = 0; i < all" + uCaseName + ".size(); i++) {");
        writer.write(NEWLINE);
        writer.write(uCaseName + " " + objType.getName().toLowerCase() + " = ("
            + uCaseName + ")all" + uCaseName + ".get(i);");
        writer.write(NEWLINE);
        writer.write("writer.write(BEGIN_OBJECT_TAG);");
        writer.write(NEWLINE);
        writer.write("writer.write(NEWLINE);");
        writer.write(NEWLINE);
        writer.write("writer.write(\""
            + SimSEObjectTypeTypes.getText(objType.getType()) + "\");");
        writer.write(NEWLINE);
        writer.write("writer.write(NEWLINE);");
        writer.write(NEWLINE);
        writer.write("writer.write(\"" + objType.getName() + "\");");
        writer.write(NEWLINE);
        writer.write("writer.write(NEWLINE);");
        writer.write(NEWLINE);

        // go through each attribute and write it
        Vector atts = objType.getAllAttributes();
        for (int j = 0; j < atts.size(); j++) {
          Attribute att = (Attribute) atts.get(j);
          writer.write("writer.write(" + "\"\" + "
              + objType.getName().toLowerCase() + ".get"
              + getUpperCaseLeading(att.getName()) + "());");
          writer.write(NEWLINE);
          writer.write("writer.write(NEWLINE);");
          writer.write(NEWLINE);
        }

        writer.write("writer.write(END_OBJECT_TAG);");
        writer.write(NEWLINE);
        writer.write("writer.write(NEWLINE);");
        writer.write(NEWLINE);
        writer.write(CLOSED_BRACK);
        writer.write(NEWLINE);
      }
      writer.write("} catch (IOException e) {");
      writer.write(NEWLINE);
      writer.write("JOptionPane.showMessageDialog(null, "
          + "(\"Error writing log file\"), \"File IO Error\","
          + "JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      // logActionTrigger method:
      writer.write("public void logActionTrigger(Action act) {");
      writer.write(NEWLINE);
      writer.write("// write action to file");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // logActionDestroyer method:
      writer.write("public void logActionDestroyer(Action act) {");
      writer.write(NEWLINE);
      writer.write("// write action to file");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(NEWLINE);

      // stop method:
      writer.write("// writes the last update and closes the file writer");
      writer.write(NEWLINE);
      writer.write("public void stop() {");
      writer.write(NEWLINE);
      writer.write("update();");
      writer.write(NEWLINE);
      writer.write("try {");
      writer.write(NEWLINE);
      writer.write("writer.close();");
      writer.write(NEWLINE);
      writer.write("} catch (IOException e) {");
      writer.write(NEWLINE);
      writer.write("JOptionPane.showMessageDialog(null, "
          + "(\"Error closing log file writer\"), \"File IO Error\","
          + " JOptionPane.WARNING_MESSAGE);");
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);
      writer.write(CLOSED_BRACK);
      writer.write(NEWLINE);

      writer.write(CLOSED_BRACK);

      writer.close();
    } catch (IOException e) {
      JOptionPane.showMessageDialog(null, ("Error writing file "
          + loggerFile.getPath() + ": " + e.toString()), "File IO Error",
          JOptionPane.WARNING_MESSAGE);
    }
  }

  private String getUpperCaseLeading(String s) {
    return (s.substring(0, 1).toUpperCase() + s.substring(1));
  }
}